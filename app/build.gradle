apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
android {
    buildToolsVersion = '29.0.3'
    compileSdkVersion 29
    defaultConfig {
        applicationId "com.z.palette"
        minSdkVersion 26
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        flavorDimensions "default"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        androidExtensions { experimental = true }
    }

    signingConfigs {
        def appKeyPassword = properties.getProperty('keyPassword')
        def appStorePassword = properties.getProperty('storePassword')
        config {

            keyAlias 'palette'
            keyPassword appKeyPassword
            storeFile file('../palette.jks')
            storePassword appStorePassword
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
    }
    compileOptions {
        sourceCompatibility "1.8"
        targetCompatibility "1.8"
    }



/*
    productFlavors {
        kang {}

        productFlavors.all { flavor ->
            flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
        }
    }
*/


}


/*
afterEvaluate {
    android.applicationVariants.all { variant ->
        // abc_渠道名_版本名.apk  还可以拼接其他app内容：variant.versionCode  variant.buildType.name
        // outputFileName = "${variant.name}_${variant.versionName}_${getDate()}.apk"
        variant.outputs.all { output ->
            def date = new Date().format("yyyy_MM_dd_hh_mm", TimeZone.getTimeZone("GMT+08"))
            if (variant.buildType.name == "debug") {
                output.outputFileName = "${date}_arbitrator_v${android.defaultConfig.versionName}_debug_${android.defaultConfig.versionCode}.apk"
            } else if (variant.buildType.name == "release") {
                output.outputFileName = "${date}_arbitrator_v${android.defaultConfig.versionName}_release_${android.defaultConfig.versionCode}.apk"
            }
        }
    }


}
*/

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.2'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
 //   implementation 'androidx.palette:palette:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
   // implementation 'com.zhihu.android:matisse:0.5.2'
   // implementation 'com.github.LuckSiege.PictureSelector:picture_library:v2.5.8'
    implementation 'com.github.LuckSiege.PictureSelector:picture_library:v2.5.8'
    implementation 'com.github.bumptech.glide:glide:4.10.0'

    implementation "androidx.core:core-ktx:1.3.2"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    //bugly
    implementation "com.tencent.bugly:crashreport_upgrade:1.4.2"
    implementation "com.tencent.bugly:nativecrashreport:3.7.1"

 //   implementation 'com.qmuiteam:qmui:2.0.0-alpha08'

    implementation'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.5'
    implementation'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.5'
    implementation project(path: ':palette')
    implementation 'com.google.android.material:material:1.2.1'
    // implementation 'com.android.tools.build:gradle:4.0.2'

  //  implementation gradleApi()
}
repositories {
    mavenCentral()
}
